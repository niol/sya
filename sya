#!/usr/bin/env python3
#
# sya, a simple front-end to the borg backup software
# Copyright (C) 2016 Alexandre Rossi <alexandre.rossi@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import argparse
import configparser
import glob
import logging
import os
import re
import traceback
import shutil
import socket
import subprocess
import sys


DEFAULT_CONFDIR = '/etc/sya'
DEFAULT_CONFFILE = 'config'
GLOBAL_PRESCRIPT_NAME = 'pre.sh'
GLOBAL_POSTSCRIPT_NAME = 'post.sh'


BINARY = shutil.which('borg')


class LockInUse(Exception): pass


class ProcessLock(object):

    # This class comes from this very elegant way of having a pid lock in order
    # to prevent multiple instances from running on the same host.
    # http://stackoverflow.com/a/7758075

    def __init__(self, process_name):
        self.pname = process_name

    def acquire(self):
        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
        try:
            # The bind address is the one of an abstract UNIX socket (begins
            # with a null byte) followed by an address which exists in the
            # abstract socket namespace (Linux only). See unix(7).
            self.socket.bind('\0' + self.pname)
        except socket.error:
            raise LockInUse

    def release(self):
        self.socket.close()


def run(path, args=None, env=None, dryrun=False):
    if dryrun:
        logging.info("$ %s %s" % (path, ' '.join(args or []), ))
        return
    cmdline = [path]
    if args is not None: cmdline.extend(args)
    subprocess.check_call(cmdline, env=env)


def run_or_exit(path, args=None, env=None, dryrun=False):
    try:
        run(path, args, env, dryrun)
    except subprocess.CalledProcessError as e:
        sys.exit(e)


def isexec(path):
    return os.path.isfile(path) and os.access(path, os.X_OK)


def check_matches(pattern):
    if '**' in pattern:
        return True

    if glob.glob(pattern, recursive=True):
        return True
    else:
        logging.warning('include/exclude pattern \'%s\' does not match '
                        'anything.' % pattern)
        return False


class BackupError(Exception): pass


def borg(command, args, passphrase=None, ssh_key=None, dryrun=False):
    env = {}
    if passphrase:
        env['BORG_PASSPHRASE'] = passphrase
    if ssh_key:
        env['BORG_RSH'] = 'ssh -i %s' % ssh_key

    args.insert(0, command)
    try:
        run(BINARY, args, env=env, dryrun=dryrun)
    except subprocess.CalledProcessError as e:
        logging.error(e)
        raise BackupError


def parse_conf(confdir, conf):
    # Loading target dir
    if 'repository' not in conf:
        logging.error("'repository' is mandatory for each task in config")
        return

    # check if we have a passphrase file
    if 'passphrase_file' in conf:
        conf['passphrase_file'] = os.path.join(confdir, conf['passphrase_file'])
        with open(conf['passphrase_file']) as f:
            conf['passphrase'] = f.readline().strip()
    else:
        conf['passphrase_file'] = ''
        conf['passphrase'] = ''

    if 'ssh_key' not in conf:
        conf['ssh_key'] = ''

    return conf


DATE_RE = re.compile(r'\-\d{4}\-\d{2}\-\d{2}')


def list_backups(pool_dir, passphrase=None, ssh_key=None):
    env = {}
    if passphrase:
        env['BORG_PASSPHRASE'] = passphrase
    if ssh_key:
        env['BORG_RSH'] = 'ssh -i %s' % ssh_key
    archives = subprocess.check_output((BINARY, 'list',
                                        '--format', '{archive}{NL}',
                                        pool_dir), env=env)
    archives = archives.decode(sys.getdefaultencoding()).strip().split('\n')
    prefixes = set()
    for archive in archives:
        m = DATE_RE.search(archive)
        if m:
            prefixes.add(archive[:m.start(0)])

    logging.debug('%s repository has the following prefixes: %s.'
                  % (pool_dir, prefixes))
    return prefixes


def process_task(options, conffile, task, gen_opts):
    conf = conffile[task]
    backup_args = list(gen_opts)

    if conffile['sya'].getboolean('verbose'):
        backup_args.append('--stats')

    if options.progress:
        backup_args.append('--progress')

    env = None

    # Check if we want to run this backup task
    if not conf.getboolean('run_this'):
        logging.debug("! Task disabled. 'run_this' must be set to 'yes' in %s"\
                      % task)
        return

    backup_args.append(conf['repository'] +
                       '::{hostname}-{now:%Y-%m-%dT%H:%M:%S}')

    if 'remote-path' in conf:
        backup_args.append('--remote-path')
        backup_args.append(conf['remote-path'])

    # Load and execute if applicable pre-task commands
    if 'pre' in conf.keys() and isexec(conf['pre']):
        try:
            run(os.path.join(options.confdir, conf['pre']), None, dryrun=options.dryrun)
        except subprocess.CalledProcessError as e:
            logging.error(e)
            return

    # run the backup
    if 'paths' in conf or 'include_file' in conf:
        # Loading source paths
        paths = None
        if 'paths' in conf:
            paths = map(str.strip, conf['paths'].strip().split(','))

        # include and exclude patterns
        includes = [p for p in paths] if paths is not None else []
        excludes = []
        if 'include_file' in conf:
            with open(os.path.join(options.confdir, conf['include_file'])) as f:
                for line in f.readlines():
                    if line.startswith('- '):
                        p = line[2:].strip()
                        if check_matches(p):
                            excludes.append(p)
                    else:
                        p = line.strip()
                        if check_matches(p):
                            includes.append(line.strip())

        if 'exclude_file' in conf:
            with open(os.path.join(options.confdir, conf['exclude_file'])) as f:
                for line in f.readlines():
                    p = line.strip()
                    if check_matches(p):
                        excludes.append(p)

        for include in includes:
            backup_args.append(include)
        for exclude in excludes:
            backup_args.append('--exclude')
            backup_args.append(exclude)

        try:
            borg('create', backup_args,
                 conf['passphrase'],
                 conf['ssh_key'],
                 options.dryrun)
        except BackupError:
            logging.error("'%s' backup failed. You should investigate." % task)
    else:
        logging.info("no 'paths' in configuration file %s, skipping backup" % task)

    # run the pruning
    if 'keep-daily' in conf or 'keep-weekly' in conf\
    or 'keep-monthly' in conf:
        backup_cleanup_args = list(gen_opts)
        if conffile['sya'].getboolean('verbose'):
            backup_cleanup_args.append('--list')
            backup_cleanup_args.append('--stats')
        for keep in ('keep-daily', 'keep-weekly', 'keep-monthly', ):
            if keep in conf:
                backup_cleanup_args.append('--' + keep)
                backup_cleanup_args.append(conf[keep])

        for prefix in list_backups(conf['repository'],
                                   conf['passphrase'],
                                   conf['ssh_key']):
            logging.info('Pruning %s...' % prefix)

            try:
                borg('prune',
                     backup_cleanup_args + ['--prefix=%s' % prefix,
                                            conf['repository']],
                     conf['passphrase'],
                     conf['ssh_key'],
                     options.dryrun)
            except BackupError:
                logging.error("'%s' old backups cleanup failed. You should "
                            " investigate." % task)

    # Load and execute if applicable post-task commands
    if 'post' in conf.keys() and isexec(conf['post']):
        try:
            run(os.path.join(options.confdir, conf['post']), None,
                dryrun=options.dryrun)
        except subprocess.CalledProcessError as e:
            logging.error(e)
            return


def do_backup(options, conffile, gen_args):
    lock = ProcessLock('sya' + options.confdir)
    try:
        lock.acquire()
    except LockInUse:
        logging.error('Another instance seems to be running on the same conf dir.')
        sys.exit(1)

    # Run global 'pre' script if it exists
    prescript_path = os.path.join(options.confdir, GLOBAL_PRESCRIPT_NAME)
    if isexec(prescript_path):
        logging.debug("Running global pre-script '%s'." % prescript_path)
        run_or_exit(prescript_path, None, dryrun=options.dryrun)

    # Task loop
    for task in conffile.sections():
        if task == 'sya': continue
        if options.task != '*' and options.task != task: continue
        logging.info('-- Backing up using %s configuration...' % task)
        try:
            process_task(options, conffile, task, gen_args)
        except:
            traceback.print_exc()
            logging.error('-- Failed backing up %s.' % task)
        else:
            logging.info('-- Done backing up %s.' % task)

    # Run global 'post' script if it exists
    postcript_path = os.path.join(options.confdir, GLOBAL_POSTSCRIPT_NAME)
    if isexec(postcript_path):
        logging.debug("Running global post-script '%s'." % postcript_path)
        run_or_exit(postcript_path, None, dryrun=options.dryrun)

    lock.release()


def do_check(options, conffile, gen_opts):
    for task in conffile.sections() :
        if task == 'sya': continue
        logging.info('-- Checking using %s configuration...' % task)
        backup_args = list(gen_opts)    
        backup_args.append(conffile[task]['repository'])
        try:
            borg('check', backup_args,
                 conffile[task]['passphrase'],
                 conffile[task]['ssh_key'],
                 options.dryrun)
        except BackupError:
            logging.error("'%s' backup check failed. You should investigate."
                          % task)
        logging.info('-- Done checking %s.' % task)


if __name__ == '__main__':
    usage = "usage: %prog [options] [actions]"
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Be verbose and print stats.')
    parser.add_argument('-p', '--progress', action='store_true',
                        help='Show progress.')
    parser.add_argument('-d', '--config-dir',
                        type=str, dest='confdir', default=DEFAULT_CONFDIR,
                        help='Configuration directory, default is %s.' % DEFAULT_CONFDIR)
    parser.add_argument('-t', '--task',
                        type=str, default='*',
                        help='Task to run, default is all.')
    parser.add_argument('-n', '--dry-run', action='store_true', dest='dryrun',
                        help='Do not run backup, don\'t act.')
    parser.add_argument('actions', metavar='ACTIONS', type=str, nargs='*',
                        default=('create', 'purge', ),
                        help='actions to perform among create, purge and check (default: create and purge)')
    args = parser.parse_args()

    gen_args = []

    logging.basicConfig(format='%(message)s', level=logging.WARNING)

    if not os.path.isdir(args.confdir):
        sys.exit("Configuration directory '%s' not found." % args.confdir)

    conffile_path = os.path.join(args.confdir, DEFAULT_CONFFILE)
    if not os.path.isfile(conffile_path):
        sys.exit("Configuration file '%s' not found." % conffile_path)

    conffile = configparser.ConfigParser()
    conffile.add_section('sya')
    conffile['sya']['verbose'] = 'no'
    conffile.read(conffile_path)
    for section in conffile.sections():
        if section != 'sya':
            try:
                parse_conf(args.confdir, conffile[section])
            except:
                traceback.print_exc()
                logging.error('-- Failed parsing config for %s, ignoring.'
                              % section)

    if args.verbose:
        conffile['sya']['verbose'] = 'yes'

    if conffile['sya'].getboolean('verbose'):
        logging.getLogger().setLevel(logging.DEBUG)
        gen_args.append('-v')

    if 'create' in args.actions or 'purge' in args.actions:
        do_backup(args, conffile, gen_args)
    if 'check' in args.actions:
        do_check(args, conffile, gen_args)

    logging.shutdown()


# vim: ts=4 sw=4 expandtab
